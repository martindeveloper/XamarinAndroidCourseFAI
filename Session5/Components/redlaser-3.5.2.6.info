{"Name":"RedLaser","Id":1769,"Alias":"redlaser","Description":"To use the RedLaser component, you must \u003ca href=\"http://redlaser.com/developers/register/\"\u003eregister with RedLaser\u003c/a\u003e to obtain a license key. You can view RedLaser\u0027s pricing details \u003ca href=\"http://redlaser.com/developers/pricing/\"\u003ehere\u003c/a\u003e.\n\nRedLaser offers developers unparalleled flexibility in scan-screen design across platforms.\n\nUsing RedLaser, you can:\n\n - Change the scan overlay image\n - Add buttons and change the location of the buttons, including toggles\n - Add dynamic content based on the barcodes scanned\n - Play different sounds in response to scanned codes\n - Track barcodes as they move across the screen (or provide confirmation for densely packed barcodes)\n\n\n## Supported Barcode Types\n\nThe RedLaser scanning SDK supports almost all major code types. We have intentionally disabled most of the supported code types in our app store application, since they aren’t associated with store products. These codes can easily be enabled in our SDK.\n\nA complete listing of supported codes is below:\n\n- UPC-A\n- UPC-E\n- Codabar\n- ITF / Code 25 (except Android)\n- Code 39, 93, 128\n- EAN 2, 5, 8, 13\n- DataBar\n- ITF 14\n- Data Matrix (Partial)\n- PDF 417\n- QR Codes\n\n","Version":"3.5.2.6","Summary":"RedLaser: The fastest, most accurate, barcode scanner in the world.  Get the best scanner for your app today.","QuickStart":"# Getting Started with RedLaser\nWelcome to developing with the RedLaser SDK! This guide will guide you through some of the key decisions and challenges in integrating the RedLaser SDK and getting barcode scanning into your iOS or Android application.\n\nTo use the RedLaser component, you must \u003ca href=\"http://redlaser.com/developers/register/\"\u003eregister with RedLaser\u003c/a\u003e to obtain a license key. You can view RedLaser\u0027s pricing details \u003ca href=\"http://redlaser.com/developers/pricing/\"\u003ehere\u003c/a\u003e.\n\nWhat the RedLaser SDK is\n\nThe RedLaser SDK is the code required to implement a barcode scanner into your application. Our SDK does not include access to our data, access to the full RedLaser application code, or other input options (like voice or image recognition).\n\n\nWhat it takes\n\nUsing the RedLaser SDK requires that you have a developer who knows how to create an iOS or Android application. You will also need a database of information to transform the outputs of RedLaser–a barcode number–into meaningful information.\n\n\nWhere to start\n\nThe Developer SDK for RedLaser includes a Sample app that shows how the SDK can be used. It is intended to be a simple demonstration of the SDK’s capabilities, and shows a somewhat simple way to use the SDK from an app. The source code in the Sample app itself should not be confused with the SDK. You are free to copy the code in the sample app if you wish, but you’re also free to use the SDK in a way different than what the Sample app does.\n\nYou need activate some preferences about barcodes supported for scanning just using \u0027true\u0027 or \u0027false\u0027 values.\n\n\tEnabledTypes.\u003cbarcode\u003e = \u003ctrue/false\u003e;\n\nImplementing Callback Methods\n\nThere are several methods you should implement in your BarcodeScanActivity subclass in order to receive status updates:\n\nFor Android:\nprotected override void OnScanStatusUpdate (IDictionary\u003cstring, Java.Lang.Object\u003e scanStatus)\n\nFor iOS:\npublic override void StatusUpdated (NSDictionary status)\n\nThis callback method is where you receive scan result data. It gets called every 0.2 seconds while scanning is active, whether there is anything new to report or not. This method will continue to be called until doneScanning() or finish() are called. The doneScanning() method ends the scan session and returns the found barcodes as an activity result.\n\nWhy use a Map, instead of multiple parameters? We can extend the Map with more keys later, without breaking the API. Clients that want to use features provided by new keys can do so, those that don’t need the new features need not change their code.\n\nThe following are the keys to what is stored in the Map:\n\nKey: FoundBarcodes\nData Type: Set \u003cBarcodeResult\u003e\nDescription: A Set of BarcodeResult objects containing all found barcodes in this scan session. The set will be empty if no barcodes have been found yet.\n\nKey: NewFoundBarcodes\nData Type: Set \u003cBarcodeResult\u003e\nDescription: A Set of BarcodeResult objects containing any new barcodes that were recognized in the most recent scan pass. A newly found barcode will appear in this set for exactly one call to onScanStatusUpdate(). It will be returned as part of the FoundBarcodes set on that and all future calls.\n\nKey: InRange\nData Type: Boolean\nDescription: A boolean set to TRUE if there is a barcode in range in the viewfinder. This key may be used to advise the user to hold the phone steady while a barcode is read. Not all devices require this guidance in order to successfully read barcodes – be sure to test on non-focusing cameras to see this key in use.\n\nKey: Guidance\nDataType: Integer\nDescription: An integer value. This key only exists if there is guidance to be given.\n1 means that the SDK sees a likely barcode in range, but has not been able to decode it for several seconds. The overlay may use this to advise the user to try scanning the barcode in parts by holding the phone close to each part of the barcode. 2 means that the SDK has scanned the first part of a barcode, the contents of which are available in the PartialBarcode property. The overlay may use this to advise the user of the part of the barcode that has been successfully scanned.\n\nKey: PartialBarcode\nData Type: BarcodeResult\nDescription: A BarcodeResult object containing the part of the barcode that\u0027s been scanned while doing partial scanning. The overlay may show the partially scanned barcode text to the user to help guide them on completing the partial scan.\n\nKey: CameraSnapshot\nData Type: byte[]\nDescription: Image data of a scanned barcode. The contents of this field is JPEG data in a byte array. To decrease overhead, this field is not returned on every status update. To obtain this data, call requestImageData() in the extended class of BarcodeScanActivity. Once requestImageData() is called, the camera snapshot data will be returned in a future onStatusUpdate().\n\nGetting Started on Android\n==========================\n\nCreate a class that inherits from **BarcodeScanActivity** and override **_OnScanStatusUpdate_** method:\n\n```csharp\nusing Ebay.RedLaser;\t\n...\n\t\nprotected override void OnScanStatusUpdate (IDictionary\u003cString, Java.Lang.Object\u003e scanStatus)\n{\n\t//Called by the SDK repeatedly while scanning is happening. This method \n\t//override is how your app can find out about the status of the scanning\n\t//session in real time.\n\n\ttry {\n\t\t\tvar newBarcodesFound = (Java.Util.ISet) scanStatus[Status.StatusNewFoundBarcodes];\n \n\t\t\tif (newBarcodesFound != null \u0026\u0026 newBarcodesFound.Size () \u003e 0) {\n\t\t\t\tvar barcode = (BarcodeResult)newBarcodesFound.ToArray () [0];\n\t\t\t\tToast.MakeText (this, barcode.BarcodeString, ToastLength.Long).Show ();\n\t\t\t}\t\n\t} catch (Exception e) {\n\t\t\tLog.Debug (\"Scanning error\", e.Message);\n\t}\n}\n```\n\nYou can use a Dialog for print the Barcode detected.\n\n\nGetting Started on iOS\n======================\n\nCreate a class that inherits from **BarcodePickerControllerBase** and override **_StatusUpdated_** method:\n\n```csharp\nusing Ebay.RedLaser;\n...\n\npublic class RedLaserViewController : BarcodePickerControllerBase\n{\n\t...\n\t\t\t\t\n\tpublic override void StatusUpdated (NSDictionary status)\n\t{\n\t\t// In the status dictionary:\n\t\t\n\t\t// \"FoundBarcodes\" key is a NSSet of all discovered barcodes this scan session.\n\t\t\t\t\n\t\t// \"NewFoundBarcodes\" key is a NSSet of barcodes discovered in the most recent pass.\n\t\t// When a barcode is found, it is added to both sets. The NewFoundBarcodes\n\t\t// set is cleaned out each pass.\n\t\t\n\t\t// \"Guidance\" key can be used to help guide the user through the process of discovering\n\t\t// a long barcode in sections. Currently only works for Code 39.\n\t\t\n\t\t// \"Valid\" key is TRUE once there are valid barcode results.\n\t\t\t\t\n\t\t// \"InRange\" key is TRUE if there\u0027s currently a barcode detected the viewfinder. The barcode\n\t\t//\tmay not have been decoded yet. It is possible for barcodes to be found without\n\t\t// \tInRange ever being set.\n\t\t\n\t\t// Make the RedLaser stripe more vivid when Barcode is in Range.\n\t\t\t\t\n\t\tvar newFoundsBarcodes = status [\"NewFoundBarcodes\"] as NSSet;\n\t\tif (newFoundsBarcodes != null \u0026\u0026 newFoundsBarcodes.Count \u003e 0) {\n\t\t\t\tvar barcode = newFoundBarcodes.ToArray\u003cBarcodeResult\u003e () [0];\n\t\t\t\tConsole.WriteLine (barcode.BarcodeString);\n\t\t\t\t\t\t\n\t\t\t\t// If you want to stop scanning\n\t\t\t\tDoneScanning ();\n\t\t}\n\t}\n\t\t\n\t...\n}\n```\n\t\nJust instantiate the ViewController:\n\n```csharp\t\n\npublic override void ViewDidAppear (bool animated)\n{\n\tbase.ViewDidAppear (animated);\n\t\t\n\tUIApplication.SharedApplication.SetStatusBarHidden (true, UIStatusBarAnimation.Slide);\n\tredLaserVC = new RedLaserViewController ();\n\tredLaserVC.PrepareToScan ();\n\tPresentViewController (redLaserVC, true, null);\n}\n```","Hash":"d49961024b77c0adfc50a649c695ca9a","TargetPlatforms":["ios","android"],"TrialHash":null}